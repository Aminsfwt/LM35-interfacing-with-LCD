
LCD and LM35.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000218  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000218  000002ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800070  00800070  000002bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aef  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000824  00000000  00000000  00000ea7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000530  00000000  00000000  000016cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00001bfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c4  00000000  00000000  00001ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e2  00000000  00000000  000020ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000238e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e1       	ldi	r30, 0x18	; 24
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 37       	cpi	r26, 0x71	; 113
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ff 00 	call	0x1fe	; 0x1fe <main>
  8a:	0c 94 0a 01 	jmp	0x214	; 0x214 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_SendCommand>:
  }

  /***************************************LCD Send COMMAND****************************/
  void LCD_SendCommand(uint8_t cmd)
  {
	  Clear_Bit(LCD_Ctrl_Out, RS);                  //RS FOR COMMAND
  92:	92 b3       	in	r25, 0x12	; 18
  94:	9f 7b       	andi	r25, 0xBF	; 191
  96:	92 bb       	out	0x12, r25	; 18
	  
	  //Send Upper nibble
	  LCD = cmd & 0xF0;
  98:	98 2f       	mov	r25, r24
  9a:	90 7f       	andi	r25, 0xF0	; 240
  9c:	95 bb       	out	0x15, r25	; 21
	  //Enable Pulse
	  Set_Bit(LCD_Ctrl_Out, EN);
  9e:	92 b3       	in	r25, 0x12	; 18
  a0:	90 61       	ori	r25, 0x10	; 16
  a2:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	e9 ef       	ldi	r30, 0xF9	; 249
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <LCD_SendCommand+0x16>
  ac:	00 c0       	rjmp	.+0      	; 0xae <LCD_SendCommand+0x1c>
  ae:	00 00       	nop
	  _delay_ms(1);
	  Clear_Bit(LCD_Ctrl_Out, EN);
  b0:	92 b3       	in	r25, 0x12	; 18
  b2:	9f 7e       	andi	r25, 0xEF	; 239
  b4:	92 bb       	out	0x12, r25	; 18

	  //Send Lower nibble
	  LCD = cmd << 4;
  b6:	82 95       	swap	r24
  b8:	80 7f       	andi	r24, 0xF0	; 240
  ba:	85 bb       	out	0x15, r24	; 21
	  //Enable Pulse
	  Set_Bit(LCD_Ctrl_Out, EN);
  bc:	82 b3       	in	r24, 0x12	; 18
  be:	80 61       	ori	r24, 0x10	; 16
  c0:	82 bb       	out	0x12, r24	; 18
  c2:	89 ef       	ldi	r24, 0xF9	; 249
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <LCD_SendCommand+0x34>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <LCD_SendCommand+0x3a>
  cc:	00 00       	nop
	  _delay_ms(1);
	  Clear_Bit(LCD_Ctrl_Out, EN);
  ce:	82 b3       	in	r24, 0x12	; 18
  d0:	8f 7e       	andi	r24, 0xEF	; 239
  d2:	82 bb       	out	0x12, r24	; 18
  d4:	08 95       	ret

000000d6 <LCD_Init>:
  #include "lcd.h"
  #include "../DIO Driver/dio.h"
  /***************************************LCD INITIALIZATION****************************/
  void LCD_Init()
  {
	  LCD_Data_Dir = 0xFF;
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	84 bb       	out	0x14, r24	; 20
	  LCD_Ctrl_Dir = 0xFF;
  da:	81 bb       	out	0x11, r24	; 17
	  Clear_Bit(LCD_Ctrl_Out, EN);
  dc:	82 b3       	in	r24, 0x12	; 18
  de:	8f 7e       	andi	r24, 0xEF	; 239
  e0:	82 bb       	out	0x12, r24	; 18

	  LCD_SendCommand(0x33);
  e2:	83 e3       	ldi	r24, 0x33	; 51
  e4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_SendCommand>
	  LCD_SendCommand(0x32);
  e8:	82 e3       	ldi	r24, 0x32	; 50
  ea:	0e 94 49 00 	call	0x92	; 0x92 <LCD_SendCommand>
	  LCD_SendCommand(FOUR_Bit_Mode);
  ee:	88 e2       	ldi	r24, 0x28	; 40
  f0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_SendCommand>
	  LCD_SendCommand(CURSOR_ON);
  f4:	8e e0       	ldi	r24, 0x0E	; 14
  f6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_SendCommand>
	  LCD_SendCommand(CLEAR_COMMAND);
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_SendCommand>
 100:	83 ef       	ldi	r24, 0xF3	; 243
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <LCD_Init+0x2e>
 108:	00 c0       	rjmp	.+0      	; 0x10a <LCD_Init+0x34>
 10a:	00 00       	nop
 10c:	08 95       	ret

0000010e <LCD_SendCharacter>:
  }

  /***************************************LCD Char send ****************************/
  void LCD_SendCharacter(uint8_t data)
  {
	  Set_Bit(LCD_Ctrl_Out,RS);
 10e:	92 b3       	in	r25, 0x12	; 18
 110:	90 64       	ori	r25, 0x40	; 64
 112:	92 bb       	out	0x12, r25	; 18
	  
	  //Send Upper nibble
	  LCD = data & 0xF0;
 114:	98 2f       	mov	r25, r24
 116:	90 7f       	andi	r25, 0xF0	; 240
 118:	95 bb       	out	0x15, r25	; 21
	  //Enable Pulse
	  Set_Bit(LCD_Ctrl_Out, EN);
 11a:	92 b3       	in	r25, 0x12	; 18
 11c:	90 61       	ori	r25, 0x10	; 16
 11e:	92 bb       	out	0x12, r25	; 18
 120:	e9 ef       	ldi	r30, 0xF9	; 249
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	31 97       	sbiw	r30, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <LCD_SendCharacter+0x16>
 128:	00 c0       	rjmp	.+0      	; 0x12a <LCD_SendCharacter+0x1c>
 12a:	00 00       	nop
	  _delay_ms(1);
	  Clear_Bit(LCD_Ctrl_Out, EN);
 12c:	92 b3       	in	r25, 0x12	; 18
 12e:	9f 7e       	andi	r25, 0xEF	; 239
 130:	92 bb       	out	0x12, r25	; 18

	  //Send Lower nibble
	  LCD = data << 4;
 132:	82 95       	swap	r24
 134:	80 7f       	andi	r24, 0xF0	; 240
 136:	85 bb       	out	0x15, r24	; 21
	  //Enable Pulse
	  Set_Bit(LCD_Ctrl_Out, EN);
 138:	82 b3       	in	r24, 0x12	; 18
 13a:	80 61       	ori	r24, 0x10	; 16
 13c:	82 bb       	out	0x12, r24	; 18
 13e:	89 ef       	ldi	r24, 0xF9	; 249
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <LCD_SendCharacter+0x34>
 146:	00 c0       	rjmp	.+0      	; 0x148 <LCD_SendCharacter+0x3a>
 148:	00 00       	nop
	  _delay_ms(1);
	  Clear_Bit(LCD_Ctrl_Out, EN);
 14a:	82 b3       	in	r24, 0x12	; 18
 14c:	8f 7e       	andi	r24, 0xEF	; 239
 14e:	82 bb       	out	0x12, r24	; 18
 150:	08 95       	ret

00000152 <LCD_DisplayString>:
  }

  /***************************************LCD DISPLAY STRING ****************************/
  void LCD_DisplayString(uint8_t *str)
  {
 152:	0f 93       	push	r16
 154:	1f 93       	push	r17
 156:	cf 93       	push	r28
 158:	8c 01       	movw	r16, r24
	  uint8_t i = 0;
 15a:	c0 e0       	ldi	r28, 0x00	; 0
	  while(str[i] != 0)
 15c:	03 c0       	rjmp	.+6      	; 0x164 <LCD_DisplayString+0x12>
	  {
		  LCD_SendCharacter(str[i]);
 15e:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_SendCharacter>
		  i++;
 162:	cf 5f       	subi	r28, 0xFF	; 255

  /***************************************LCD DISPLAY STRING ****************************/
  void LCD_DisplayString(uint8_t *str)
  {
	  uint8_t i = 0;
	  while(str[i] != 0)
 164:	f8 01       	movw	r30, r16
 166:	ec 0f       	add	r30, r28
 168:	f1 1d       	adc	r31, r1
 16a:	80 81       	ld	r24, Z
 16c:	81 11       	cpse	r24, r1
 16e:	f7 cf       	rjmp	.-18     	; 0x15e <LCD_DisplayString+0xc>
	  {
		  LCD_SendCharacter(str[i]);
		  i++;
	  }
  }
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <LM_init>:
  
  uint8_t data;
  
  void LM_init()
  {
	  Clear_Bit(LM_Ctrl, 0);			//use PA0 as Input Pin
 178:	8a b3       	in	r24, 0x1a	; 26
 17a:	8e 7f       	andi	r24, 0xFE	; 254
 17c:	8a bb       	out	0x1a, r24	; 26
	  Adc_Ctrl = 0x87;				//enable ADC & 128 prescaler
 17e:	87 e8       	ldi	r24, 0x87	; 135
 180:	86 b9       	out	0x06, r24	; 6
	  Adc_Selct = 0xE0;				//use 2.56 internal Vref & single ended data will be left justified
 182:	80 ee       	ldi	r24, 0xE0	; 224
 184:	87 b9       	out	0x07, r24	; 7
 186:	08 95       	ret

00000188 <Convert_n_Display>:
	  Convert_n_Display(data);
	  _delay_ms(1000);
  }

  void Convert_n_Display(uint8_t value)
  {
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	00 d0       	rcall	.+0      	; 0x18e <Convert_n_Display+0x6>
 18e:	cd b7       	in	r28, 0x3d	; 61
 190:	de b7       	in	r29, 0x3e	; 62
	  uint8_t x, d1, d2;

	  //Split data and convert it to HEX
	  d1 = (value / 10) + 0x30;
 192:	9d ec       	ldi	r25, 0xCD	; 205
 194:	89 9f       	mul	r24, r25
 196:	91 2d       	mov	r25, r1
 198:	11 24       	eor	r1, r1
 19a:	96 95       	lsr	r25
 19c:	96 95       	lsr	r25
 19e:	96 95       	lsr	r25
 1a0:	20 e3       	ldi	r18, 0x30	; 48
 1a2:	29 0f       	add	r18, r25
 1a4:	29 83       	std	Y+1, r18	; 0x01
	  
	  d2 = (value % 10) + 0x30;
 1a6:	99 0f       	add	r25, r25
 1a8:	29 2f       	mov	r18, r25
 1aa:	22 0f       	add	r18, r18
 1ac:	22 0f       	add	r18, r18
 1ae:	92 0f       	add	r25, r18
 1b0:	89 1b       	sub	r24, r25
 1b2:	80 5d       	subi	r24, 0xD0	; 208
 1b4:	8a 83       	std	Y+2, r24	; 0x02

	  LCD_SendCommand(0x8D);             //start displaying beside Temperature word
 1b6:	8d e8       	ldi	r24, 0x8D	; 141
 1b8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_SendCommand>

	  //display HEX data
	  LCD_DisplayString(&d1);
 1bc:	ce 01       	movw	r24, r28
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_DisplayString>
	  LCD_DisplayString(&d2);
 1c4:	ce 01       	movw	r24, r28
 1c6:	02 96       	adiw	r24, 0x02	; 2
 1c8:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_DisplayString>

 1cc:	0f 90       	pop	r0
 1ce:	0f 90       	pop	r0
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <Read_LM>:
  }

  void Read_LM()
  {
	  
	  Set_Bit(Adc_Ctrl, Start_Convert);
 1d6:	86 b1       	in	r24, 0x06	; 6
 1d8:	80 64       	ori	r24, 0x40	; 64
 1da:	86 b9       	out	0x06, r24	; 6
	  while(Is_Bit_Clear(Adc_Ctrl,Adc_Inter_flag));
 1dc:	34 9b       	sbis	0x06, 4	; 6
 1de:	fe cf       	rjmp	.-4      	; 0x1dc <Read_LM+0x6>

	  data = Adc_High_Store;
 1e0:	85 b1       	in	r24, 0x05	; 5
 1e2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
	  Convert_n_Display(data);
 1e6:	0e 94 c4 00 	call	0x188	; 0x188 <Convert_n_Display>
 1ea:	2f e3       	ldi	r18, 0x3F	; 63
 1ec:	8d e0       	ldi	r24, 0x0D	; 13
 1ee:	93 e0       	ldi	r25, 0x03	; 3
 1f0:	21 50       	subi	r18, 0x01	; 1
 1f2:	80 40       	sbci	r24, 0x00	; 0
 1f4:	90 40       	sbci	r25, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <Read_LM+0x1a>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <Read_LM+0x24>
 1fa:	00 00       	nop
 1fc:	08 95       	ret

000001fe <main>:
#include "LCD driver/lcd.h"
#define  F_CPU 16000000ul

int main(void)
{
	LCD_Init();
 1fe:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_Init>
	LCD_DisplayString(" Temperature= ");
 202:	80 e6       	ldi	r24, 0x60	; 96
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_DisplayString>

	LM_init();
 20a:	0e 94 bc 00 	call	0x178	; 0x178 <LM_init>
	while (1)
	{
		Read_LM();		
 20e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <Read_LM>
 212:	fd cf       	rjmp	.-6      	; 0x20e <main+0x10>

00000214 <_exit>:
 214:	f8 94       	cli

00000216 <__stop_program>:
 216:	ff cf       	rjmp	.-2      	; 0x216 <__stop_program>
